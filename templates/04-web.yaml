---
AWSTemplateFormatVersion: 2010-09-09
Description: Moodle web instances

Parameters:
  RDSInstanceSecretArn:
    Type: String
  NumberOfSubnets:
    AllowedValues:
    - 1
    - 2
    - 3
    Default: 2
    Description: Number of subnets. This must match your selections in the list of subnets below.
    Type: String 
  PublicAlbTargetGroupArn:
    Description: The public application load balancer target group arn.
    Type: String
  Subnet:
    Description: Select existing subnets. The number selected must match the number of subnets above. Subnets selected must be in separate AZs.
    Type: List<AWS::EC2::Subnet::Id>
  WebAsgMax:
    AllowedPattern: ^((?!0$)[1-2]?[0-9]|30)$
    ConstraintDescription: Must be a number between 1 and 30.
    Default: 1
    Description: Specifies the maximum number of EC2 instances in the Web Autoscaling Group.
    Type: String
  WebAsgMin:
    AllowedPattern: ^([0-0]?[0-9]|10)$
    ConstraintDescription: Must be a number between 0 and 10.
    Default: 2
    Description: Specifies the minimum number of EC2 instances in the Web Autoscaling Group.
    Type: String
  WebInstanceType:
    AllowedValues:
      - t3.nano 
      - t3.micro 
      - t3.small 
      - t3.medium 
      - t3.large 
      - t3.xlarge 
      - t3.2xlarge
      - m5.large 
      - m5.xlarge 
      - m5.2xlarge 
      - m5.4xlarge 
      - m5.8xlarge 
      - m5.12xlarge
      - m5.16xlarge
      - m5.24xlarge      
      - c5.large 
      - c5.xlarge 
      - c5.2xlarge 
      - c5.4xlarge 
      - c5.9xlarge 
      - c5.12xlarge
      - c5.18xlarge  
      - c5.24xlarge      
      - r5.large 
      - r5.xlarge 
      - r5.2xlarge 
      - r5.4xlarge 
      - r5.8xlarge 
      - r5.12xlarge
      - r5.16xlarge
      - r5.24xlarge
      - t3a.nano 
      - t3a.micro 
      - t3a.small 
      - t3a.medium 
      - t3a.large 
      - t3a.xlarge 
      - t3a.2xlarge
      - m5a.large 
      - m5a.xlarge 
      - m5a.2xlarge 
      - m5a.4xlarge 
      - m5a.8xlarge 
      - m5a.12xlarge
      - m5a.16xlarge
      - m5a.24xlarge      
      - c5a.large 
      - c5a.xlarge 
      - c5a.2xlarge 
      - c5a.4xlarge 
      - c5a.9xlarge 
      - c5a.12xlarge
      - c5a.18xlarge  
      - c5a.24xlarge      
      - r5a.large 
      - r5a.xlarge 
      - r5a.2xlarge 
      - r5a.4xlarge 
      - r5a.8xlarge 
      - r5a.12xlarge
      - r5a.16xlarge
      - r5a.24xlarge
      - t4g.nano 
      - t4g.micro 
      - t4g.small 
      - t4g.medium 
      - t4g.large 
      - t4g.xlarge 
      - t4g.2xlarge
      - m6g.large 
      - m6g.xlarge 
      - m6g.2xlarge 
      - m6g.4xlarge 
      - m6g.8xlarge 
      - m6g.12xlarge
      - m6g.16xlarge
      - m6g.24xlarge
      - m7g.medium
      - m7g.large
      - m7g.xlarge
      - m7g.2xlarge
      - m7g.4xlarge
      - m7g.8xlarge
      - m7g.12xlarge
      - m7g.16xlarge
      - c6g.large 
      - c6g.xlarge 
      - c6g.2xlarge 
      - c6g.4xlarge 
      - c6g.9xlarge 
      - c6g.12xlarge
      - c6g.18xlarge  
      - c6g.24xlarge      
      - r6g.large 
      - r6g.xlarge 
      - r6g.2xlarge 
      - r6g.4xlarge 
      - r6g.8xlarge 
      - r6g.12xlarge
      - r6g.16xlarge
      - r6g.24xlarge
      - c7g.medium
      - c7g.large
      - c7g.xlarge
      - c7g.2xlarge
      - c7g.4xlarge
      - c7g.8xlarge
      - c7g.12xlarge
      - c7g.16xlarge
    ConstraintDescription: Must be a valid Amazon EC2 instance type.
    Default: c6g.2xlarge
    Description: The Amazon EC2 instance type for your web instances.
    Type: String
  WebSecurityGroup:
    Description: Select the web security group.
    Type: AWS::EC2::SecurityGroup::Id
  LatestAmiId :
    Type : AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Default: /aws/service/ami-amazon-linux-latest/al2023-ami-kernel-default-x86_64
  LatestArmAmiId :
    Type : AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Default: /aws/service/ami-amazon-linux-latest/al2023-ami-kernel-default-arm64
  CodeArtifactS3BucketArn:
    Type: "String"
    Description: Code Artifact S3 Bucket Arn
  ProjectName:
    AllowedPattern: ^([a-zA-Z0-9]*)$
    Default: App
    Description: Main stack name
    Type: String

Conditions:
  NumberOfSubnets1: !Equals [ 1, !Ref NumberOfSubnets ]
  NumberOfSubnets2: !Equals [ 2, !Ref NumberOfSubnets ]
  NumberOfSubnets3: !Equals [ 3, !Ref NumberOfSubnets ]
  UsingGraviton2Ami:  !Or
    - !Equals ["t4",!Select [0, !Split [ "g.", !Ref WebInstanceType]]]
    - !Equals ["c6",!Select [0, !Split [ "g.", !Ref WebInstanceType]]]
    - !Equals ["c7",!Select [0, !Split [ "g.", !Ref WebInstanceType]]]
    - !Equals ["m6",!Select [0, !Split [ "g.", !Ref WebInstanceType]]]
    - !Equals ["m7",!Select [0, !Split [ "g.", !Ref WebInstanceType]]]
    - !Equals ["r6",!Select [0, !Split [ "g.", !Ref WebInstanceType]]]
    - !Equals ["r7",!Select [0, !Split [ "g.", !Ref WebInstanceType]]]
    
Resources:
  WebInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
      - !Ref WebInstanceRole

  WebInstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - ec2.amazonaws.com
          Action:
          - sts:AssumeRole
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore'
        - 'arn:aws:iam::aws:policy/service-role/AmazonEC2RoleforAWSCodeDeployLimited' 
      Path: /
      Policies:
      - PolicyName: MoodleCustomWebInstancePolicy
        PolicyDocument:
          Version: 2012-10-17
          Statement:
          - Effect: Allow
            Action:
            - logs:CreateLogStream
            - logs:PutLogEvents
            - logs:DescribeLogStreams
            Resource:
            - !GetAtt Logs.Arn
          - Effect: Allow
            Action:
            - autoscaling:CompleteLifecycleAction
            - autoscaling:DescribeAutoScalingInstances
            - autoscaling:DescribeLifecycleHooks
            Resource:
            - "*"
          - Effect: Allow
            Action:
            - secretsmanager:GetSecretValue
            Resource:
            - !Ref RDSInstanceSecretArn
          - Effect: Allow
            Action:
            - s3:GetObject
            - s3:ListBucket
            - s3:GetBucketLocation
            Resource:
              - !Ref CodeArtifactS3BucketArn
              - !Join [ '', [ !Ref CodeArtifactS3BucketArn,'/*' ] ]
          - Effect: Allow
            Action:
              - cloudformation:DescribeStackResources
              - cloudformation:DescribeStackResource
            Resource:
              - '*'
            
  Logs: 
      Type: AWS::Logs::LogGroup
      DeletionPolicy: Delete
      Properties: 
        RetentionInDays: 7

  WebAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      Cooldown: '60'
      HealthCheckGracePeriod: 120
      HealthCheckType: ELB
      LaunchTemplate:
        LaunchTemplateId: !Ref WebLaunchTemplate
        Version: !GetAtt WebLaunchTemplate.LatestVersionNumber
      MaxSize: !Ref WebAsgMax
      MinSize: !Ref WebAsgMin
      Tags:
        - Key: Name
          Value: !Join [ '', [ 'Web ASG / ', !Ref 'AWS::StackName' ] ]
          PropagateAtLaunch: true
      TargetGroupARNs:
        - !Ref PublicAlbTargetGroupArn
      VPCZoneIdentifier:
        !If
          [ NumberOfSubnets1,
          [ !Select [ 0, !Ref Subnet ] ],
          !If
            [ NumberOfSubnets2,
            [ !Select [ 0, !Ref Subnet ], !Select [ 1, !Ref Subnet ] ],
            [ !Select [ 0, !Ref Subnet ], !Select [ 1, !Ref Subnet ], !Select [ 2, !Ref Subnet ] ] 
            ]
          ]
    CreationPolicy:
      ResourceSignal:
        Count: !Ref WebAsgMin
        Timeout: PT15M
        
  ScaleUpPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName:
        Ref: WebAutoScalingGroup
      Cooldown: '300'
      ScalingAdjustment: 1

  CPUAlarmHigh:
    Type: AWS::CloudWatch::Alarm
    Properties:
      EvaluationPeriods: 3
      Statistic: Average
      Threshold: 75
      AlarmDescription: Alarm if CPU too high
      Period: 60
      AlarmActions:
      - Ref: ScaleUpPolicy
      Namespace: AWS/EC2
      Dimensions:
      - Name: AutoScalingGroupName
        Value: !Ref WebAutoScalingGroup
      ComparisonOperator: GreaterThanThreshold
      MetricName: CPUUtilization   

  ScaleDownPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName:
        Ref: WebAutoScalingGroup
      Cooldown: '300'
      ScalingAdjustment: -1

  CPUAlarmLow:
    Type: AWS::CloudWatch::Alarm
    Properties:
      EvaluationPeriods: 3
      Statistic: Average
      Threshold: 25
      AlarmDescription: Alarm if CPU too low
      Period: 60
      AlarmActions:
      - Ref: ScaleDownPolicy
      Namespace: AWS/EC2
      Dimensions:
      - Name: AutoScalingGroupName
        Value: !Ref WebAutoScalingGroup
      ComparisonOperator: LessThanThreshold
      MetricName: CPUUtilization   
     
  WebLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Metadata:
      AWS::CloudFormation::Init:
        configSets:
          deploy_webserver:
            - install_packages
            - install_cloudwatchlogs
            - install_codedeploy
            - install_webserver
            - start_services
            - add_crontab
        install_packages:
          packages:
            yum:
              amazon-cloudwatch-agent: []
              ruby3.2: []
              httpd: []
              php8.1: []
              php8.1-gd: []
              php8.1-soap: []
              php8.1-intl: []
              php8.1-mbstring: []
              php8.1-xml: []
              php8.1-opcache: []
              php8.1-fpm: []
              php8.1-pgsql: []
              php8.1-mysqlnd: []
              cronie: []
              php8.1-devel: []
              php-pear: []
              libzip: []
              libzip-devel: []
              libsodium-devel: []
              libzstd-devel: []
              redis6-devel: []
              lz4-devel: []
              libmemcached-awesome-tools: []
              libmemcached-awesome-devel: []
              zlib-devel: []
              cyrus-sasl-devel: []
              libevent-devel: []
        install_cloudwatchlogs:
          files:
            /etc/awslogs/awslogs.conf:
              content: !Sub |
                [general]
                state_file= /var/awslogs/state/agent-state
                
                [/var/log/cloud-init.log]
                file = /var/log/cloud-init.log
                log_group_name = ${Logs}
                log_stream_name = {instance_id}/cloud-init.log
                datetime_format = 
                
                [/var/log/cloud-init-output.log]
                file = /var/log/cloud-init-output.log
                log_group_name = ${Logs}
                log_stream_name = {instance_id}/cloud-init-output.log
                datetime_format = 
                
                [/var/log/cfn-init.log]
                file = /var/log/cfn-init.log
                log_group_name = ${Logs}
                log_stream_name = {instance_id}/cfn-init.log
                datetime_format = 
                
                [/var/log/cfn-hup.log]
                file = /var/log/cfn-hup.log
                log_group_name = ${Logs}
                log_stream_name = {instance_id}/cfn-hup.log
                datetime_format = 
                
                [/var/log/cfn-wire.log]
                file = /var/log/cfn-wire.log
                log_group_name = ${Logs}
                log_stream_name = {instance_id}/cfn-wire.log
                datetime_format = 
                
                [/var/log/httpd]
                file = /var/log/httpd/*
                log_group_name = ${Logs}
                log_stream_name = {instance_id}/httpd
                datetime_format = %d/%b/%Y:%H:%M:%S
              mode: '000444'
              owner: root
              group: root
            /etc/awslogs/awscli.conf:
              content: !Sub |
                [plugins]
                cwlogs = cwlogs
                [default]
                region = ${AWS::Region}
              mode: '000444'
              owner: root
              group: root
          commands:
            create_state_directory:
              command: mkdir -p /var/awslogs/state
        install_codedeploy:
          files:
            /home/ec2-user/install:
              source: !Join ["", ["https://aws-codedeploy-", !Ref "AWS::Region", ".s3.", !Ref "AWS::Region", ".amazonaws.com/latest/install" ] ]
              mode: "000755"
          commands:
            install_codedeploy:
              command: "./install auto"
              cwd: "/home/ec2-user/"
        install_webserver:
          files:
            /tmp/status.txt:
              content: !Sub |
                  Health Check
              mode: '000644'
              owner: root
              group: root  
            /tmp/create_site_conf.sh:
              content: !Sub |
                #!/bin/bash -xe

                # Below to be able to compile zip.so for the PHP Zip library that's not in the available packages...
                pecl install zip
                echo "extension=zip.so;" > /etc/php.d/50-zip.ini

                # Install Sodium
                pecl install -f libsodium
                echo "extension=sodium.so;" > /etc/php.d/50-sodium.ini

                # Install Redis client as well as related extensions - see here https://github.com/amazonlinux/amazon-linux-2023/issues/328
                pear update-channels
                pecl update-channels
                /usr/bin/yes 'no' | pecl install igbinary
                echo 'extension=igbinary.so' > /etc/php.d/30-igbinary.ini
                /usr/bin/yes 'no' | pecl install msgpack
                echo 'extension=msgpack.so' > /etc/php.d/30-msgpack.ini
                /usr/bin/yes 'no' | pecl install zstd
                echo 'extension=zstd.so' > /etc/php.d/40-zstd.ini
                /usr/bin/yes 'no' | pecl install --configureoptions 'enable-lzf-better-compression="no"' lzf
                echo 'extension=lzf.so' > /etc/php.d/40-lzf.ini
                /usr/bin/yes 'no' | pecl install --configureoptions 'enable-redis-igbinary="yes" enable-redis-lzf="yes" enable-redis-zstd="yes" enable-redis-msgpack="yes" enable-redis-lz4="yes" with-liblz4="yes"' redis
                echo 'extension=redis.so' > /etc/php.d/41-redis.ini

                # Adjust base php.ini
                sed -i 's/memory_limit =.*/memory_limit = 4096M/' /etc/php.ini
                sed -i 's/;max_input_vars.*/max_input_vars = 5000/' /etc/php.ini

                # Create Apache config
                if [ ! -f /etc/httpd/conf.d/moodle.conf ]; then                    
                   touch /etc/httpd/conf.d/moodle.conf
                   echo 'ServerName 127.0.0.1:80' >> /etc/httpd/conf.d/moodle.conf
                   echo 'DocumentRoot /var/www/moodle/html' >> /etc/httpd/conf.d/moodle.conf
                   echo '<Directory /var/www/moodle/html>' >> /etc/httpd/conf.d/moodle.conf
                   echo '  Options Indexes FollowSymLinks' >> /etc/httpd/conf.d/moodle.conf
                   echo '  AllowOverride All' >> /etc/httpd/conf.d/moodle.conf
                   echo '  Require all granted' >> /etc/httpd/conf.d/moodle.conf
                   echo '</Directory>' >> /etc/httpd/conf.d/moodle.conf
                fi

                # Create hidden opcache directory locally & change owner to apache
                if [ ! -d /var/www/.opcache ]; then                    
                    mkdir -p /var/www/.opcache
                fi
                # Ensure opcache is enabled and add settings recomended by moodle at https://docs.moodle.org/34/en/OPcache
                sed -i 's/;opcache.file_cache=.*/opcache.file_cache=\/tmp\/' /etc/php.d/10-opcache.ini
                sed -i 's/opcache.memory_consumption=.*/opcache.memory_consumption=512/' /etc/php.d/10-opcache.ini
                sed -i 's/opcache.max_accelerated_files=.*/opcache.max_accelerated_files=8000/' /etc/php.d/10-opcache.ini
                sed -i 's/;opcache.revalidate_freq=.*/opcache.revalidate_freq=300/' /etc/php.d/10-opcache.ini
                sed -i 's/;opcache.use_cwd=.*/opcache.use_cwd=1/' /etc/php.d/10-opcache.ini
                sed -i 's/;opcache.validate_timestamps=.*/opcache.validate_timestamps=1/' /etc/php.d/10-opcache.ini
                sed -i 's/;opcache.save_comments=.*/opcache.save_comments=1/' /etc/php.d/10-opcache.ini
                sed -i 's/;opcache.file_cache_only=.*/opcache.file_cache_only=1/' /etc/php.d/10-opcache.ini

                # Install ElastiCache client
                #if [ $(uname -a | grep -c x86_64) == "1" ]; then
                #    echo "downloading x86 client for ElastiCache"
                #    wget -P /tmp/ https://elasticache-downloads.s3.amazonaws.com/ClusterClient/PHP-8.1/latest-64bit-X86-openssl3
                #    tar -xf '/tmp/latest-64bit-X86-openssl3'
                #else 
                #    echo "downloading ARM-64 client for ElastiCache"
                #    wget -P /tmp/ https://elasticache-downloads.s3.amazonaws.com/ClusterClient/PHP-8.2/latest-64bit-arm-X86-openssl3
                #    tar -xf '/tmp/latest-64bit-arm-X86-openssl3'
                #fi
                #mv amazon-elasticache-cluster-client.so /usr/lib64/php/modules/
                #echo 'extension=amazon-elasticache-cluster-client.so;' > /etc/php.d/50-elasticache.ini
                # Install Memcached client - note that ElastiCache client is failing on AL2023
                /usr/bin/yes 'no' | pecl install --configureoptions 'enable-memcached-igbinary="yes" enable-memcached-msgpack="yes" enable-memcached-json="yes" enable-memcached-protocol="yes" enable-memcached-sasl="yes" enable-memcached-session="yes"' memcached
                echo 'extension=memcached.so' > /etc/php.d/41-memcached.ini

                # Mount EFS
                availabilityzone=$(ec2-metadata -z | awk '{print $2}' | sed 's/(.)//')
                region=$(ec2-metadata -z | awk '{print $2}' | sed 's/[a-z]$//')
                if grep -qs '/var/www/moodle/data ' /proc/mounts; then
                  echo "/var/www/moodle/data is mounted."
                else
                  export EnvElasticFileSystem=$(aws ssm get-parameters --region $region --names /Moodle/${ProjectName}/SharedFile/ElasticFileSystem --query Parameters[0].Value)
                  export EnvElasticFileSystem=`echo $EnvElasticFileSystem | sed -e 's/^"//' -e 's/"$//'`

                  sudo mkdir -p /$EnvElasticFileSystem
                  sudo mountpoint -q /$EnvElasticFileSystem || sudo mount -t nfs4 -o nfsvers=4.1,rsize=1048576,wsize=1048576,hard,timeo=600,retrans=2 $EnvElasticFileSystem.efs.${AWS::Region}.amazonaws.com:/ /$EnvElasticFileSystem
                                  
                  #Create directories for Moodle
                  sudo mkdir -p /$EnvElasticFileSystem/data
                  sudo mkdir -p /$EnvElasticFileSystem/cache
                  sudo mkdir -p /$EnvElasticFileSystem/temp

                  chown apache:apache /$EnvElasticFileSystem/data/
                  chown apache:apache /$EnvElasticFileSystem/cache/
                  chown apache:apache /$EnvElasticFileSystem/temp/
                                  
                  sudo umount -f /$EnvElasticFileSystem

                  mount -t nfs4 -o nfsvers=4.1,rsize=1048576,wsize=1048576,hard,timeo=600,retrans=2 $EnvElasticFileSystem.efs.${AWS::Region}.amazonaws.com:/data /var/www/moodle/data
                  #mount -t nfs4 -o nfsvers=4.1,rsize=1048576,wsize=1048576,hard,timeo=600,retrans=2 $EnvElasticFileSystem.efs.${AWS::Region}.amazonaws.com:/cache /var/www/moodle/cache
                  #mount -t nfs4 -o nfsvers=4.1,rsize=1048576,wsize=1048576,hard,timeo=600,retrans=2 $EnvElasticFileSystem.efs.${AWS::Region}.amazonaws.com:/temp /var/www/moodle/temp
                fi

                cp /tmp/status.txt /var/www/moodle/html/status.txt
              mode: 000500
              owner: root
              group: root
          commands:
            create_site_conf:
              command: ./create_site_conf.sh
              cwd: /tmp
        start_services:
          services:
            sysvinit:
              httpd:
                enabled: true
                ensureRunning: true
              crond:
                enabled: true
                ensureRunning: true
        add_crontab:
          files:
            /tmp/add_crontab.sh:
              content: !Sub |
                  #!/bin/sh -xe
                  echo "* * * * * apache /usr/bin/php /var/www/moodle/html/admin/cli/cron.php" >> /etc/cron.d/moodle
              mode: 000500
              owner: root
              group: root
          commands:
            add_crontab:
              command: ./add_crontab.sh
              cwd: /tmp
    Properties:
      LaunchTemplateData:
        BlockDeviceMappings:
          - DeviceName: /dev/xvda
            Ebs:
              DeleteOnTermination: true
              VolumeSize: 10
              VolumeType: gp3
        IamInstanceProfile:
          Arn: !GetAtt WebInstanceProfile.Arn
        ImageId: !If [UsingGraviton2Ami, !Ref LatestArmAmiId, !Ref LatestAmiId]
        InstanceType: !Ref WebInstanceType
        Monitoring:
          Enabled: true
        SecurityGroupIds:
        - !Ref WebSecurityGroup
        UserData:
          Fn::Base64:
            !Sub |
              #!/bin/bash -xe
              sudo systemctl enable amazon-ssm-agent
              sudo systemctl start amazon-ssm-agent
              
              #Create directory structure
              mkdir -p /var/www/moodle/html
              mkdir -p /var/www/moodle/data
              mkdir -p /var/www/moodle/cache
              mkdir -p /var/www/moodle/temp
              mkdir -p /var/www/moodle/local

              #Run CloudFormation Init Scripts
              /opt/aws/bin/cfn-init --configsets deploy_webserver --verbose --stack ${AWS::StackName} --resource WebLaunchTemplate --region ${AWS::Region}
              /opt/aws/bin/cfn-signal --exit-code $? --stack ${AWS::StackName} --resource WebAutoScalingGroup --region ${AWS::Region}

Outputs:
  WebAutoScalingGroupName:
    Value: !Ref WebAutoScalingGroup
